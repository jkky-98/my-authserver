spring:
  datasource:
    url: jdbc:h2:tcp://localhost/~/oauth2-demo
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:
      maximum-pool-size: 10  # 커넥션 풀 최대 크기 (동시 접속 가능한 커넥션 수)
      connection-timeout: 3000  # 커넥션 풀에서 연결을 기다리는 최대 시간 (3초)
      idle-timeout: 600000  # 사용되지 않는 커넥션이 유지되는 시간 (10분)
      max-lifetime: 1800000  # 커넥션의 최대 수명 (30분)
  jpa:
    # H2 데이터베이스용 Hibernate dialect(JPA가 사용할 데이터베이스 플랫폼을 지정한다)
    database-platform: org.hibernate.dialect.H2Dialect
    # 애플리케이션 시작시 엔티티 클래스를 기반으로 테이블을 생성하고, 애플리케이션 종료시 테이블을 삭제한다
    hibernate:
      ddl-auto: create
      # 테이블 관련 SQL문 콘솔에 출력
      show-sql: true
      properties:
        hibernate:
          jdbc:
            batch_size: 100
          format_sql: true
          order_inserts: true
          order_updates: true

  security:
    oauth2:
      client:
        registration:
          # 구글 OAuth2 클라이언트 설정
          google:
            client-id: ${GOOGLE_CLIENT_ID}            # Google API Console에서 발급받은 클라이언트 ID
            client-secret: ${GOOGLE_CLIENT_SECRET}    # Google API Console에서 발급받은 클라이언트 시크릿
            scope:         # 요청할 리소스의 범위(권한)를 구글에 미리 알려줘야 합니다.
              - profile    # 사용자 프로필 기본 정보(이름, 프로필 사진 등) 접근 권한
              - email      # 사용자 이메일 주소 정보 접근 권한

          # 네이버 OAuth2 클라이언트 설정
          naver:
            client-id: ${NAVER_CLIENT_ID}            # Naver Developers에서 발급받은 클라이언트 ID
            client-secret: ${NAVER_CLIENT_SECRET}    # Naver Developers에서 발급받은 클라이언트 시크릿
            client-authentication-method: client_secret_post
            # 토큰 요청 시 client_id/client_secret을 POST 바디에 담아 전송
            authorization-grant-type: authorization_code
            # 권한 부여 방식: 인가 코드(authorization code) 플로우
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # 인가 코드 수신 콜백 URL 패턴. 예: https://your-domain.com/login/oauth2/code/naver
            scope:
              - name           # 사용자 이름 정보 요청
              - email          # 사용자 이메일 정보 요청
              - profile_image  # 사용자 프로필 이미지 URL 요청
            client-name: Naver  # 스프링 시큐리티 UI 등에 표시될 클라이언트 이름

        provider:
          # 네이버 전용 OAuth2 공급자 설정
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            # 사용자를 네이버 로그인/동의 화면으로 보낼 엔드포인트
            token-uri: https://nid.naver.com/oauth2.0/token
            # 인가 코드를 액세스 토큰으로 교환할 토큰 엔드포인트
            user-info-uri: https://openapi.naver.com/v1/nid/me
            # 액세스 토큰으로 사용자 상세 정보를 조회할 API 엔드포인트
            user-info-authentication-method: header
            # 사용자 정보 요청 시 Bearer 토큰을 HTTP 헤더에 포함
            user-name-attribute: response
            # 사용자 정보 JSON에서 실제 유저 데이터가 포함된 속성 이름

jwt:
  secret: ${JWT_SECRET}

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2.client: DEBUG